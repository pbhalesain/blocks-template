import openai from '@/app/lib/cloude';
import { expenseSchema, invoiceSchema } from '@/app/lib/validators';
import prisma from '@/lib/prisma';
import { NextResponse } from 'next/server';

export async function POST(request: Request) {
  try {
    const { startDate, endDate } = await request.json();

    // Validate input data
    const validatedStartDate = new Date(startDate);
    const validatedEndDate = new Date(endDate);

    if (isNaN(validatedStartDate.getTime()) || isNaN(validatedEndDate.getTime())) {
      return NextResponse.json({ error: 'Invalid date format' }, { status: 400 });
    }

    // Fetch invoices and expenses from the database
    const invoices = await prisma.invoice.findMany({
      where: {
        dueDate: {
          gte: validatedStartDate,
          lte: validatedEndDate,
        },
      },
    });

    const expenses = await prisma.expense.findMany({
      where: {
        date: {
          gte: validatedStartDate,
          lte: validatedEndDate,
        },
      },
    });

    // Validate invoices and expenses
    const validatedInvoices = invoices.map((invoice) => invoiceSchema.parse(invoice));
    const validatedExpenses = expenses.map((expense) => expenseSchema.parse(expense));

    // Prepare the data for Claude.ai
    const data = {
      invoices: validatedInvoices,
      expenses: validatedExpenses,
      startDate: validatedStartDate.toISOString(),
      endDate: validatedEndDate.toISOString(),
    };

    const chatResponse = await openai.openai.chat.completions.create({
	messages: [{ role: 'user', content: 'Say this is a test' }],
	model: 'text-davinci-003',
	//prompt: `Generate a cash flow projection based on the following data:\n\n${JSON.stringify(data)}`,
	max_tokens: 1000,
	temperature: 0.7, // Adjust the temperature value to control the creativity of the response

      });
    // Process the response and store the projection in the database
    const projection = chatResponse.choices[0].finish_reason;
    const cashFlowProjection = await prisma.cashFlowProjection.create({
      data: {
        startDate: validatedStartDate,
        endDate: validatedEndDate,
        projection,
      },
    });

    return NextResponse.json(cashFlowProjection);
  } catch (error) {
    console.error('Error generating cash flow projection:', error);
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const templateAction = searchParams.get('action');

    if (templateAction === 'cashflow-projection-template') {
      const projectionTemplate = `
# Cash Flow Projection

## Overview
This is a cash flow projection template generated by Claude.ai. It provides a structured format for presenting cash flow projections, including sections for income, expenses, and net cash flow.

## Income
### Projected Income
- Invoice 1: $X
- Invoice 2: $Y
- ...

### Total Projected Income: $Z

## Expenses
### Projected Expenses
- Expense 1: $X
- Expense 2: $Y
- ...

### Total Projected Expenses: $Z

## Net Cash Flow
### Projected Net Cash Flow: $Z

This template can be customized and populated with the actual data from invoices and expenses to generate a comprehensive cash flow projection report.
`;

      return NextResponse.json({ projectionTemplate }, { status: 200 });
    }

    return NextResponse.json({ error: 'Invalid action' }, { status: 400 });
  } catch (error) {
    console.error('Error fetching template:', error);
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}